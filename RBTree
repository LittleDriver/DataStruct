#pragma once
#include<iostream>
using namespace std;

enum color
{
	RED,
	BLACK,
};

template<class K,class V>
struct RBTreeNode
{
	RBTreeNode<K, V>* _parent;
	RBTreeNode<K, V>* _left;
	RBTreeNode<K, V>* _right;
	color _col;

	K _key;
	V _value;


	RBTreeNode(const K& key, const V& value)
		:_parent(NULL)
		, _left(NULL)
		, _right(NULL)
		, _col(RED)
		, _key(key)
		, _value(value)
	{}
};

template<class K,class V>
class RBTree
{
	typedef RBTreeNode<K, V> Node;
public:
	RBTree()
		:_root(NULL)
	{}

	bool Insert(const K& key, const V& value)
	{
		if (_root == NULL)
		{
			_root = new Node(key, value);
			_root->_col = BLACK;
			return true;
		}

		Node* parent = NULL;
		Node* cur = _root;

		while (cur)
		{
			if (cur->_key > key)
			{
				parent = cur;
				cur = cur->_left;
			}
			else if (cur->_key < key)
			{
				parent = cur;
				cur = cur->_right;
			}
			else
			{
				return false;    //找到相同的key就不往进插
			}
		}

		if (parent->_key > key)
		{
			cur = new Node(key,value);
			parent->_left = cur;
			cur->_parent = parent;
		}
		else
		{
			cur = new Node(key, value);
			parent->_right = cur;
			cur->_parent = parent;
		}

		while (cur != _root && parent->_col == RED)  //调整颜色 //条件1：保证肯定会有父节点  条件2：保证肯定会有祖父节点
		{
			Node* grandfather = parent->_parent;
			if (parent == grandfather->_left)   //主要是为了确定叔叔（uncle）节点的位置
			{
				Node* uncle = grandfather->_right;
				if (uncle && uncle->_col == RED)       //情况1
				{
					uncle->_col = BLACK;
					parent->_col = BLACK;
					grandfather->_col = RED;

					cur = grandfather;
					parent = cur->_parent;
				}
				else
				{
					/*if (parent->_left == cur)
					{
						parent->_col = BLACK;
						grandfather->_col = RED;

						_RotateR(grandfather);
					}
					else
					{
						parent->_col = BLACK;
						grandfather->_col = RED;

						_RtateL(parent);
					}*/

					if (parent->_right == cur)  //情况3------->转化为情况2 单旋的情况
					{
						_RotateL(parent);
					}

					parent->_col = BLACK;                  
					grandfather->_col = RED;

					_RotateR(grandfather);              //情况2 

					break;
				}
			}
			else                              //parent == grandfather->_right    也分情况1，2，3
			{
				Node* uncle = grandfather->_left;

				if (uncle && uncle->_col == RED)
				{
					uncle->_col = BLACK;
					parent->_col = BLACK;
					grandfather->_col = RED;

					cur = grandfather;
					parent = cur->_parent;
				}
				else
				{
					if (parent->_left == cur)
					{
						_RotateR(parent);
					}

					parent->_col = BLACK;
					grandfather->_col = RED;
					_RotateL(grandfather);

					break;
				}
			}
		}

		_root->_col = BLACK;
	}

	void InOrder()   //中序遍历
	{
		_InOrder(_root);
		cout << endl;
	}

	bool Check()
	{
		int blacknum = 0;//记录一条路径（这里计算的是最左路）黑色节点的个数 
		int blacknumcur = 0; //记录当前结点到根节点之间的黑色节点个数

		Node* cur = _root;
		while (cur)
		{
			if (cur->_col == BLACK)
			{
				++blacknum;
			}
			cur = cur->_left;
		}

		return _Check(_root, blacknum, blacknumcur);
	}

protected:

	bool _Check(Node* root, int blacknum, int blacknumcur)
	{
		if (root == NULL)
		{
			return true;
		}

		if (root->_col == BLACK)
		{
			++blacknumcur;
		}
		else
		{
			if (root->_parent && root->_parent->_col == RED)   //检查是不是两个红色在一起
			{
				cout << "Not balance!  ALL RED" << root->_key <<endl;
				return false;
			}
		}

		if (root->_left == NULL && root->_right == NULL)
		{
			if (blacknum == blacknumcur)
			{
				return true;
			}
			else                //黑色的个数不相等
			{
				cout << "Not balance!" << root->_key <<endl;
				return false;
			}
		}

		return _Check(root->_left, blacknum, blacknumcur) && _Check(root->_right, blacknum, blacknumcur);  //递归所有路径
	}

	void _InOrder(Node* root)
	{
		if (root == NULL)
			return;

		_InOrder(root->_left);
		cout << root->_key << " ";
		_InOrder(root->_right);
	}

	void _RotateL(Node*& parent)
	{
		Node* subR = parent->_right;
		Node* subRleft = subR->_left;

		parent->_right = subRleft;
		if (subRleft)
		{
			subRleft->_parent = parent;
		}

		subR->_left = parent;
		subR->_parent = parent->_parent;
		parent->_parent = subR;

		parent = subR;

		if (parent->_parent == NULL)
		{
			_root = parent;
		}
		else
		{
			Node* ppNode = parent->_parent;
			if (ppNode->_key > parent->_key)
			{
				ppNode->_left = parent;
			}
			else
			{
				ppNode->_right = parent;
			}
		}
	}

	void _RotateR(Node*& parent)
	{
		Node* subL = parent->_left;
		Node* subLright = subL->_right;

		parent->_left = subLright;
		if (subLright)
			subLright->_parent = parent;

		subL->_right = parent;
		subL->_parent = parent->_parent;

		parent->_parent = subL;

		parent = subL;

		if (parent->_parent == NULL)   //检查是否parent节点上面还是否有节点，并处理情况
		{
			_root = parent;
		}
		else
		{
			Node* ppNode = parent->_parent;

			if (ppNode->_key > parent->_key)
			{
				ppNode->_left = parent;
			}
			else
			{
				ppNode->_right = parent;
			}
		}
	}
protected:
	Node* _root;
};


void TestRBTree()
{
	int a[] = { 1, 4, 6, 8, 0, 2, 3, 5, 9, 7 };
	RBTree<int, int> rb;

	for (size_t i = 0; i < sizeof(a) / sizeof(a[0]); ++i)
	{
		rb.Insert(a[i], i);
	}

	rb.InOrder();
	rb.Check();
}
