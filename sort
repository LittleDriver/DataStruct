#pragma once
#include<iostream>
using namespace std;
#include<assert.h>

//插入排序

void PrintArray(int* a, size_t size)
{
	assert(a);

	for (size_t i = 0; i < size; ++i)
	{
		cout << a[i] << " ";
	}
	cout << endl;
}


void InsertSort(int* a, int size)
{
	assert(a);

	for (int i = 0; i < size - 1; ++i)
	{
		int end = i;                                 //标识有序数组的最后一位
		int tmp = a[end + 1];
		while (end >= 0 && tmp < a[end])
		{
			a[end + 1] = a[end];                     //待插入数据比有序数组的最后一个数小，将有序数组最后一位向后移位
			--end;
		}
		a[end + 1] = tmp;
	}
}

void TestInsertSort()
{
	int a[] = { 2, 5, 4, 9, 3, 6, 8, 7, 1, 0 };

	InsertSort(a, sizeof(a) / sizeof(a[0]));

	PrintArray(a, sizeof(a) / sizeof(a[0]));
}


//希尔排序

void ShellSort(int* a,size_t size)
{
	assert(a);
	int gap = size / 2;
	while (gap > 0)
	{
		for (int i = 0; i < size - gap; ++i)
		{
			int end = i;                                
			int tmp = a[end + gap];
			while (end >= 0 && tmp < a[end])
			{
				a[end + gap] = a[end];                    
				end -= gap;
			}
			a[end + gap] = tmp;
		}
		--gap;
	}
}

void TestShellSort()
{
	int a[] = { 2, 5, 4, 9, 3, 6, 8, 7, 1, 0 };

	ShellSort(a, sizeof(a) / sizeof(a[0]));

	PrintArray(a, sizeof(a) / sizeof(a[0]));
}


//堆排序

void AdjustDown(int* a, size_t size, int parent)
{
	assert(a);
	int child = parent * 2 + 1;
	while (child<size)
	{
		if (child+1<size && a[child] < a[child + 1])
			++child;

		if (a[parent] < a[child])
		{
			swap(a[parent], a[child]);
			parent = child;
			child = parent * 2 + 1;
		}
		else
		{
			break;
		}
		
	}
}

void HeapSort(int* a,size_t size)
{
	assert(a);
	//建堆
	for (int i = (size - 2) / 2; i >= 0; --i)
	{
		AdjustDown(a, size, i);
	}

	for (size_t i = 0; i < size; ++i)
	{
		swap(a[0], a[size - 1 - i]);
		AdjustDown(a, size - i - 1, 0);
	}
}



void TestHeapSort()
{
	int a[] = { 2, 5, 4, 9, 3, 6, 8, 7, 1, 0 };

	HeapSort(a, sizeof(a) / sizeof(a[0]));

	PrintArray(a, sizeof(a) / sizeof(a[0]));
}



//选择排序

void SelectSort(int* a, size_t size)
{
	assert(a);
	for (size_t i = 0; i < size; ++i)
	{
		int max = 0;
		for (size_t j = 0; j < size - i; ++j)
		{
			if (a[j]>a[max])
			{
				max = j;
			}
		}
		swap(a[size - i -1],a[max]);
	}
}


void TestSelectSort()
{
	int a[] = { 2, 5, 4, 9, 3, 6, 8, 7, 1, 0 };

	SelectSort(a, sizeof(a) / sizeof(a[0]));

	PrintArray(a, sizeof(a) / sizeof(a[0]));
}


//冒泡排序

void BubbleSort(int* a, size_t size)
{
	assert(a);

	for (size_t i = 0; i < size; ++i)
	{
		for (size_t j = 0; j < size - i-1; ++j)
		{
			if (a[j]>a[j + 1])
			{
				int tmp = a[j];
				a[j] = a[j + 1];
				a[j + 1] = tmp;
			}
		}
	}
}

void TestBubbleSort()
{
	int a[] = { 2, 5, 4, 9, 3, 6, 8, 7, 1, 0 };

	BubbleSort(a, sizeof(a) / sizeof(a[0]));

	PrintArray(a, sizeof(a) / sizeof(a[0]));
}


//快速排序

void QuickSort(int* a, int left, int right)
{
	assert(a);

	int begin = left;
	int end = right - 1;
	int key = a[right];

	if (left >= right)
	{
		return;
	}

	while (begin < end)
	{
		while (begin < end && a[begin] < key)
		{
			++begin;
		}

		while (begin<end && a[end] > key)
		{
			--end;
		}

		if (begin < end)
		{
			swap(a[begin], a[end]);
			++begin;
			//--end;
		}
	}

	if (a[begin] > key)
	{
		swap(a[begin], a[right]);
	}

	QuickSort(a, left, begin - 1);
	QuickSort(a, begin + 1, right);
}

void TestQuickSort()
{
	//int a[] = { 2, 0, 4, 9, 3, 6, 8, 7, 1, 5 };
	//int a[] = { 0, 1};
	int a[] = { 2, 0, 4, 9, 3, 6, 8, 7, 1, 5, 5, 5, 5, 5, 5, };
	int size = sizeof(a) / sizeof(a[0]);

	QuickSort(a, 0, size - 1);

	PrintArray(a, sizeof(a) / sizeof(a[0]));
}



void QuickSort1(int* a, int left, int right)
{
	assert(a);

	if (left >= right)
	{
		return;
	}
	int prev = left - 1;
	int cur = left;
	int key = a[right];

	while (cur < right)
	{
		while (a[cur] < key && ++prev != cur)
		{
			swap(a[cur], a[prev]);
		}
		++cur;
	}

	while (a[prev] < a[right])
	{ 
		++prev;
	}

	swap(a[right], a[prev]);
	QuickSort1(a, left, prev - 1);
	QuickSort1(a, prev + 1, right);

}

void TestQuickSort1()
{
	int a[] = { 2, 0, 4, 9, 3, 6, 8, 7, 1, 5 };

	int size = sizeof(a) / sizeof(a[0]);

	QuickSort1(a, 0, size - 1);

	PrintArray(a, sizeof(a) / sizeof(a[0]));
}
