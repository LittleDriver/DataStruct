#pragma once
#include<iostream>
using namespace std;

enum Status
{
	EXIST,
	EMPTY,
	DELETE,
};

template<class K>
class HashTable
{
public:
	HashTable()
		:_table(NULL)
		, _status(NULL)
		, _size(0)
		, _capacity(0)
	{}

	HashTable(const K& size)
		:_table(new K[size])
		, _status(new Status[size])
		, _size(0)
		, _capacity(size)
	{
		for (size_t i = 0; i < _capacity; ++i)
		{
			_status[i] = EMPTY;
		}
	}

	void Insert(const K& key)
	{
		if (_size >= _capacity)
		{
			return;
		}

		size_t index = _hashkey(key);
		size_t j = 0;
		while (1)
		{
			if (_table[index] == key)
			{
				return;
			}

			if (_status[index] != EXIST)
			{
				_table[index] = key;
				_status[index] = EXIST;
				++_size;
				return;
			}

			index = (index + j) % _capacity;
			++j;
		}
		
	}

	int Find(const K& key)
	{
		size_t index = _hashkey(key);
		size_t j = 0;
		while (_status[index] != EMPTY)   //当状态为EMPTY的时候说明后面没有数据
		{                                  //--------------有BUG,当数据为满的时候----------------
			if (_status[index] == EXIST && _table[index] == key)
			{
				return index;
			}
			index = (index + j) % _capacity;
			++j;
		}                
		return -1;
	}

	void Remove(const K& key)
	{
		int index = Find(key);

		if (index != -1)
		{
			_status[index] = DELETE;
			--_size;
		}
		return;
	}

	void Display()
	{
		for (size_t i = 0; i < _capacity; ++i)
		{
			if (_status[i] == EXIST)
			{
				cout << "[" << i << "]" << ":" << _table[i] << endl;
			}
			else 
			{
				cout << "[" << i << "]" << ":" << "NULL"<< endl;
			}
		}
	}
protected:
	size_t _hashkey(const K& key)
	{
		return key%_capacity;
	}
protected:
	K* _table;
	Status* _status;
	size_t _size;
	size_t _capacity;
};


void TestHash()
{
	HashTable<int> ha1(10);
	ha1.Insert(5);
	ha1.Insert(15);
	ha1.Insert(9);
	ha1.Insert(19);

	ha1.Display();
	cout << "19的位置:" << ha1.Find(19) << endl;

	ha1.Remove(15);
	ha1.Display();

}


void TestHash1()
{
	HashTable<int> ha1(10);
	ha1.Insert(0);
	ha1.Insert(1);
	ha1.Insert(2);
	ha1.Insert(3);
	ha1.Insert(4);
	ha1.Insert(5);
	ha1.Insert(6);
	ha1.Insert(7); 
	ha1.Insert(8);
	ha1.Insert(9);
	ha1.Insert(10);
	ha1.Display();

	ha1.Remove(10);   //----------------有BUG------------------------------
}




#pragma once
#include<iostream>
using namespace std;
#include<string>


enum Status
{
	EXIST,
	DELETE,
	EMPTY,
};


template<class K,class V>
struct KeyValue
{
	K _key;
	V _value;

	KeyValue(const K& key = K(), const V& value = V())
		:_key(key)
		, _value(value)
	{}
};

template<class K>
struct DefaultHashFuncer
{
	size_t operator()(const K& key)
	{
		return key;
	}
};


static size_t BKDRHash(const char * str)
{
	unsigned int seed = 131; // 31 131 1313 13131 131313
	unsigned int hash = 0;
	while (*str)
	{
		hash = hash * seed + (unsigned char)(*str++);
	}
	return (hash & 0x7FFFFFFF);
}


template<>
struct DefaultHashFuncer<string>
{
	size_t operator()(const string& str)
	{
		/*size_t value = 0;
		for (size_t i = 0; i < str.size(); ++i)
		{
			value += str[i];
		}

		return value;*/
		return BKDRHash(str.c_str());
	}
};

template<class K,class V,
class HashFuncer = DefaultHashFuncer<K>>
class HashTable
{
	typedef KeyValue<K, V> KV;
public:
	HashTable(size_t size)
		:_tables(new KV[size])
		, _status(new Status[size])
		, _size(0)
		, _capacity(size)
	{
		for (size_t i = 0; i < _capacity; ++i)
		{
			_status[i] = EMPTY;
		}
	}

	~HashTable()
	{
		if (_tables)
		{
			delete[] _tables;
			delete[] _status;
		}
		_size = 0;
		_capacity = 0;
	}

	bool Insert(const K& key, const V& value)
	{
		if (_size == _capacity)   //-----------------
		{
			cout << "FULL!" << endl;
			return false;
		}

		size_t index = _HashFunc0(key);
		int i = 0;   //-----------------

		while (_status[index] == EXIST)
		{
			if (_tables[index]._key == key)
			{
				return false;
			}
			index = _HashFunci(index, i++);
		}

		_status[index] = EXIST;
		_tables[index] = KV(key, value);
		++_size;

		return true;
	}
	

	size_t _HashFunc0(const K& key)
	{
		HashFuncer hf;
		return hf(key) % _capacity;
	}


	size_t _HashFunci(size_t prevHash, int i)
	{
		return (prevHash + 2 * i - 1) % _capacity;
	}


	void Display()
	{
		for (size_t i = 0; i < _capacity; ++i)
		{
			if (_status[i] == EXIST)
			{
				cout << "[" << i << "]" << ":" << _tables[i]._value << endl;
			}
			else
			{
				cout << "[" << i << "]" << ":" << "NULL" << endl;
			}
		}
	}
protected:
	KV* _tables;
	Status* _status;
	size_t _size;
	size_t _capacity;
};


void TestKV()
{
	HashTable<string, string> ht1(13);
	ht1.Insert("peter", "张老师");
	ht1.Insert("jack", "杰克");
	ht1.Insert("rose", "玫瑰");

	ht1.Display();
}
