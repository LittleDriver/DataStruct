
#pragma once
#include<iostream>
using namespace std;
#include<vector>
#include<assert.h>


template<class T>
struct Less
{
	bool operator()(const T& l, const T& r)
	{
		return l < r;
	}
};


template<class T>
struct Greater
{
	bool operator()(const T& l, const T& r)
	{
		return l > r;
	}
};

template<class T>   //----------------------------------------
struct Less<T*>
{
	bool operator()(const T* Nodel, const T* Noder)
	{
		return Nodel->_wight < Noder->_wight;
	}
};



template<class T, class Compare = Less<T>>
class Heap
{
public:
	Heap()
	{}

	Heap(const T* a, size_t size,const T& invaild)
	{
		_a.reserve(size);

		for (size_t i = 0; i < size; ++i)
		{
			if (a[i] != invaild)
			{
				_a.push_back(a[i]);
			}
		}

		for (int i = (size - 2) / 2; i >= 0; --i)
		{
			_AdjustDown(i);
		}
	}


	Heap(vector<T> a)
	{
		_a.swap(a);

		for (int i = (size - 2) / 2; i >= 0; --i)
		{
			_AdjustDown(i);
		}
	}

	void Push(const T& x)
	{
		_a.push_back(x);
		_AdjustUp(_a.size() - 1);
	}


	void Pop()
	{
		size_t size = _a.size();
		assert(size > 0);

		swap(_a[0], _a[size - 1]);
		_a.pop_back();
		_AdjustDown(0);
	}

	T& GetTop()
	{
		assert(!_a.empty());
		return _a[0];
	}

	bool Empty()
	{
		return _a.empty();
	}


	size_t Size()
	{
		return _a.size();
	}

protected:

	void _AdjustUp(int child)
	{
		Compare _con;
		int parent = (child - 1) / 2;

		while (child > 0)
		{
			if (_con(_a[child], _a[parent]))
			{
				swap(_a[child], _a[parent]);
				child = parent;
				parent = (child - 1) / 2;
			}
			else
			{
				break;
			}
		}
	}

	void _AdjustDown(size_t parent)
	{
		Compare _con;
		size_t child = parent * 2 + 1;
		size_t size = _a.size();

		while (child < size)
		{
			if (child + 1 < size && _con(_a[child + 1], _a[child]))
			{
				++child;
			}

			if (_con(_a[child], _a[parent]))
			{
				swap(_a[parent], _a[child]);
				parent = child;
				child = parent * 2 + 1;
			}
			else
			{
				break;
			}
		}
	}
protected:
	vector<T> _a;
};
